- if @field.uuid.nil?
  #map-canvas-field{ style: "width: 100%; height: 500px;" }
  #form-model-field.modal.fade{"aria-hidden" => "true", "aria-labelledby" => "modalLabel", role: "dialog", tabindex: "-1"}
    .modal-dialog{style: "width: 480px;"}
      .modal-content
        .modal-header
          %button.close{"aria-hidden" => "true", "data-dismiss" => "modal", type: "button"} Ã—
          %h4#modalLabel.modal-title New Field
        .modal-body
          = simple_form_for @field, html: {class: 'form-horizontal'} do |f|
            .form-group
              %label.col-xs-4.control-label{for: 'field_name'} Name
              .col-xs-8
                = f.input :name, label: false, input_html: {class: "form-control"}
                %span.help-block= f.error :name
            .form-group
              %label.col-xs-4.control-label{for: 'field_dimension'} Dimension
              .col-xs-8
                = f.input :dimension, label: false, input_html: {class: "form-control"}
                %span.help-block= f.error :dimension
            .form-group
              %label.col-xs-4.control-label{for: 'field_note'} Note
              .col-xs-8
                = f.input :note, label: false, input_html: {class: "form-control"}
                %span.help-block= f.error :note
            = f.input :lat_long, as: :hidden, label: false, input_html: {class: "form-control"}
            = f.error :lat_long
            .modal-footer
              = f.submit class: "btn btn-primary", "data-disable-with" => "Submitting..."
              %button.btn.btn-default{"data-dismiss" => "modal", type: "button"} Cancel
  :javascript
    function clearSelection() {
      if(selectedShape) {
        selectedShape.setEditable(false);
        selectedShape = null;
      }
    }

    function setSelection(shape) {
      selectedShape = shape;
      shape.setEditable(true);
    }

    var mapOptions = {
      center: new google.maps.LatLng(-34.397, 150.644),
      zoom: 8
    };

    var map = new google.maps.Map(document.getElementById('map-canvas-field'),
      mapOptions);

    var drawingManager = new google.maps.drawing.DrawingManager({
      drawingMode: google.maps.drawing.OverlayType.POLYGON,
      drawingControl: false,
      drawingControlOptions: {
        position: google.maps.ControlPosition.TOP_CENTER,
        drawingModes: [
          google.maps.drawing.OverlayType.POLYGON,
        ]
      },
      editable: true,
      draggable: true
    });

    drawingManager.setMap(map);

    google.maps.event.addListener(drawingManager, 'overlaycomplete', function(polygon) {
      drawingManager.setDrawingMode(null);
      var newShape = polygon.overlay;
      newShape.type = polygon.type;
      setSelection(newShape);
      google.maps.event.addListener(newShape, 'click', function() {
        setSelection(newShape);
      });
    });

    google.maps.event.addDomListener(drawingManager, 'polygoncomplete', function(polygon) {
      var polygonBounds = polygon.getPath();
      var coordinates = [];
      for(var i = 0 ; i < polygonBounds.length ; i++) {
        coordinates.push({"lat": polygonBounds.getAt(i).lat(), "long": polygonBounds.getAt(i).lng()});
      }
      $('#form-model-field').modal();
      $("#field_lat_long").val(JSON.stringify(coordinates));
    });
- else
  .row
    .col-xs-7
      #map-canvas-field{ style: "width: 100%; height: 500px;" }
    .col-xs-5
      = simple_form_for @field, html: {class: 'form-horizontal'} do |f|
        .form-group
          %label.col-xs-4.control-label{for: 'field_name'} Name
          .col-xs-8
            = f.input :name, label: false, input_html: {class: "form-control"}
            %span.help-block= f.error :name
        .form-group
          %label.col-xs-4.control-label{for: 'field_dimension'} Dimension
          .col-xs-8
            = f.input :dimension, label: false, input_html: {class: "form-control"}
            %span.help-block= f.error :dimension
        .form-group
          %label.col-xs-4.control-label{for: 'field_note'} Note
          .col-xs-8
            = f.input :note, label: false, input_html: {class: "form-control"}
            %span.help-block= f.error :note
        = f.input :lat_long, as: "hidden", label: false, input_html: {class: "form-control"}
        .form-group
          .col-xs-12
            .pull-right
              = render partial: 'form_button', locals: { f: f }
  :javascript
    console.log(JSON.parse($("#field_lat_long").val()).length);
    var bermudaTriangle;
    var myLatLng = new google.maps.LatLng(-34.397, 150.644);

    function getPolygonCoords() {
      var len = bermudaTriangle.getPath().getLength();
      var coordinates = [];

      for (var i = 0; i < len; i++) {
        coordinates.push({"lat": bermudaTriangle.getPath().getAt(i).lat(), "long": bermudaTriangle.getPath().getAt(i).lng()});
      }

      $("#field_lat_long").val(JSON.stringify(coordinates));
    }
    
    var mapOptions = {
      zoom: 12,
      center: myLatLng,
      mapTypeId: google.maps.MapTypeId.RoadMap
    };

    var map = new google.maps.Map(document.getElementById('map-canvas-field'), mapOptions);

    var triangleCoords = [];

    for(var i = 0; i < JSON.parse($("#field_lat_long").val()).length; i++) {
      triangleCoords.push(new google.maps.LatLng(JSON.parse($("#field_lat_long").val())[i].lat, JSON.parse($("#field_lat_long").val())[i].long));
    }

    //var triangleCoords = [
    //  new google.maps.LatLng(33.5362475, -111.9267386),
    //  new google.maps.LatLng(33.5104882, -111.9627875),
    //  new google.maps.LatLng(33.5004686, -111.9027061)
    //];

    bermudaTriangle = new google.maps.Polygon({
      paths: triangleCoords,
      draggable: true, // turn off if it gets annoying
      editable: true,
      strokeColor: '#FF0000',
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor: '#FF0000',
      fillOpacity: 0.35
    });

    bermudaTriangle.setMap(map);
    google.maps.event.addListener(bermudaTriangle, "dragend", getPolygonCoords);
    google.maps.event.addListener(bermudaTriangle.getPath(), "insert_at", getPolygonCoords);
    google.maps.event.addListener(bermudaTriangle.getPath(), "remove_at", getPolygonCoords);
    google.maps.event.addListener(bermudaTriangle.getPath(), "set_at", getPolygonCoords);
